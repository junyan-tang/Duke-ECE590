
For this problem, you will implement a "DFA". Your program should take
in a DFA description and an input string s and return True if the DFA
accepts the input string, and False if not.

We have provided you the DFA class and some helper functions:

   -Dfa: It is a DFA class. A Dfa object has two fields: transitions
   and accepting. The states of this DFA are integers from 0 to
   len(transitions). The alphabet of this DFA is all ASCII characters.
   The start state is state 0. Accepting is a list (think “array” if you
   are in ECE 551) that indicates for each state whether it is accepting
   or not. If accepting[i] is True, then state i is an accepting state. If
   accepting[i] is False, then state i is not an accepting state.

   The transition function is described in transitions as a 2D list
   (again, think 2D array). Namely δ(q, c) = transitions[q][c] That is,
   you index the transitions list first by state, then by input symbol,
   and get the state number to transition to.

   -readDFA: This helper function reads a DFA description, which takes a filename,
   and returns a Dfa object.

   -readDFAFile: A helper function for readDFA which does the actual file
   reading and parsing

   -parseTransitions: A helper which parses the transitions while reading
   the DFA.
 
   -addSkippedStates: A helper function that adds skipped state numbers.
   If, for some reason, our input skips a state number (e.g. specifies the state
   0, 2, 3 but not 1), this adds the missing states with no transitions.
   
   -addFailTransitions: A helper function that adds missing transitions.
   Anytime we don't specify a transition, we implicitly transition to a
   "fail/sink state".


GOAL:

Your goal is to write the doDFA function, which takes in a DFA
object (as returned by readDFA), and an input string s. This
function should return True if the DFA accepts the input string,
and False if not.

Note that this function should not be long nor complex (Around five lines of code).

Test your code thoroughly!

You will turn in dfa.py for this assignment.

-------------------------------------------------------------------

Examining the provided DFAs: If you want to take a look
at the sample DFAs that we provided and what readDFA produces,
you can start by looking in odd1s.dfa. This file is a
DFA that recognizes the language of strings having only
0s and 1s, and where the number of 1s in the string is odd. The
first line names the accepting states. In this case, just state 1. If
you do the following in Python (after evaluating the definitions
in dfa.py):

   d = readDFA("odd1s.dfa")
   d.accepting
   
You will see [False, True, False]

This result shows that states 0 and 2 are not accepting, and state
1 is accepting. The next lines in the odd1s.dfa file describe
the transitions. Each one starts by specifying what state it is
describing (0: means “from state 0...”). Then it has an input
symbol and the state number (symbol=state). So the line for
state 0 (0:1=1,0=0) says that if you see a ’1’ go to state 1, and if
you see a ’0’ go to state 0. The next line (1:1=0,0=1) says that
if you are in state 1 and you see a ’1’, go to state 0, and if you
see a ’0’ goto state 1.

If you then evaluate d.transitions

You will see that the result has 3 states (0, 1, and 2), and that
most of the entries are 2. Our readDFA adds a state for any
symbols not specified in the input file (like ’a’ and ’ !’ etc) and
sends them to a non-accepting state which always loops to itself.

If you evaluate d.transitions[1][ord(’0’)]

You will get 1. Here ord converts the character ’0’ to its numerical
value. This says that if you are in state 1, and you see a ’0’,
you will go to state 1.